---

## BASIC CONFIGURATION
esphome:
  name: samsung-ashp
  friendly_name: "Samsung ASHP"

esp32:
  board: m5stack-atom

web_server:
  port: 80

# Enable logging
logger:
  logs:
    # Remove the "Your component takes to long to respond warning"
    component: ERROR

# Enable native API for communication with Home Assistant
api:

# Enable OTA firmware update
ota:
  platform: esphome

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Optional manual IP
  # manual_ip:
  #   static_ip: 10.58.0.202
  #   gateway: 10.58.0.1
  #   subnet: 255.255.255.0
  #   dns1: 10.58.0.21
  #   dns2: 10.58.0.22
  # TODO secret
  domain: .theclarkhome.com

# captive_portal:

uart:
  tx_pin: GPIO19   # Use GPIO26 for ATOM Tail485
  rx_pin: GPIO22   # Use GPIO32 for ATOM Tail485
  baud_rate: 9600
  parity: EVEN

## SAMSUNG AC CONFIGURATION

external_components:
  - source: github://omerfaruk-aran/esphome_samsung_hvac_bus@main
    components: [samsung_ac]
  # - source: github://oxan/esphome-stream-server

# stream_server:

samsung_ac:
  debug_log_undefined_messages: false  # Log the undefined messages
  debug_log_messages: false  # Log defined (know,expected) messages
  debug_mqtt_host: mosquitto.theclarkhome.com
  debug_mqtt_port: 1883
  debug_mqtt_username: !secret mqtt_user
  debug_mqtt_password: !secret mqtt_password

  capabilities:
    horizontal_swing: false
  #   vertical_swing: true
  #   horizontal_swing: true
  #   # Presets define special AC modes like Windfree, Eco, and so on.
  #   # The following modes are available: sleep, quiet, fast, longreach,
  #   # windfree, eco.
  #   presets:
  #     # Short version - a quick and simple way to enable presets.
  #     quiet: true
  #     # Long version - allows customization, including localized names and
  #     # control over enabling the presets.
  #     fast:
  #       name: "Fast cooling"
  #       enabled: true

  devices:
    - address: "10.00.00"
      error_code:
        name: Error Code

      outdoor_temperature:
        name: Heat Pump Outdoor temperature
        id: outdoor_temperature

      outdoor_instantaneous_power:
        name: Heat Pump Energy Consumed last Min
        id: heat_pump_energy_consumed_last_min

      outdoor_cumulative_energy:
        name: Heat Pump Energy Consumed Total
        id: heat_pump_energy_consumed_total

      # outdoor_current:
      #   name: Heat Pump Current

      custom_sensor:
        - name: Compressor Frequency
          message: 0x8238
          device_class: frequency
          state_class: measurement
          unit_of_measurement: Hz
          accuracy_decimals: 1

        - name: Comp Frequency Target
          message: 0x8237
          device_class: frequency
          state_class: measurement
          unit_of_measurement: Hz
          accuracy_decimals: 1

        - name: Fan Speed
          message: 0x823D
          state_class: measurement
          unit_of_measurement: RPM
          accuracy_decimals: 1

    - address: "20.00.00"  # Indoor device address
      water_temperature:
        name: "DHW Temperature"
        id: hot_water_current_temp

      water_heater_mode:
        name: "DHW Mode"

      water_heater_power:
        name: "DHW Power"
        id: dhw_power

      water_target_temperature:
        name: "DHW Target Temperature"
        id: hot_water_target_temp
        internal: true

      # water_outlet_target:
      #   name: "Water Outlet Target"

      power:
        name: "Zone Power"

      # Creates climate control in Home Assistant. A climate control combines
      # multiple of the controls below (like temperature, mode etc.)
      climate:
        name: "Zone Heating"

      # If your AC sits near or inside the ceiling, the reported room
      # temperature is often a little bit heigher then whats measured below.
      # This property can be used to correct that value.
      # room_temperature_offset: -1.4

      custom_sensor:
        - name: Flow Rate
          message: 0x42E9
          device_class: volume_flow_rate
          state_class: measurement
          unit_of_measurement: l/min
          accuracy_decimals: 1
          filters:
            - multiply: 0.1
        - name: Flow Temp
          id: flow_temp
          message: 0x4238
          device_class: temperature
          state_class: measurement
          unit_of_measurement: "°C"
          accuracy_decimals: 1
          filters:
            - multiply: 0.1
        - name: Flow Temp Return
          id: return_temp
          message: 0x4236
          device_class: temperature
          state_class: measurement
          unit_of_measurement: "°C"
          accuracy_decimals: 1
          filters:
            - multiply: 0.1

        - name: Heat Pump Heat Generated Last Min
          id: heat_pump_heat_generated_last_min
          message: 0x4426
          device_class: energy
          state_class: measurement
          accuracy_decimals: 1
          unit_of_measurement: W
          filters:
            - lambda: !lambda |
                return (int16_t) x;

        - name: Heat Pump Heat Generated Total
          id: heat_pump_heat_generated_total
          message: 0x4427
          device_class: energy
          state_class: total_increasing
          unit_of_measurement: kWh
          accuracy_decimals: 1
          filters:
            - multiply: 0.001

        # 0x4067: ENUM_IN_3WAY_VALVE
        # On control board the valve is connected to Pin B17
        # Pin B17 is a switched live output to the DHW Valve
        # 0 = Room; 1 = Tank (from NASA docs)
        - name: DHW Status
          id: hot_water_heating
          message: 0x4067
          state_class: measurement

        # 0x4069: ENUM_IN_THERMOSTAT1
        # On control board the on/off thermostat is connected to Pin B22
        # Pin B22 is a command input (Command Signal Zone 1 Heating)
        # 0 = Off, 1 = Cool, 2 = Heat (from NASA docs)
        - name: Zone Heating Status
          id: zone_heating
          message: 0x4069
          state_class: measurement

        - name: Outing Mode
          message: 0x406D
          state_class: measurement

        - name: External Thermostat Application (WL1)  #  2091
          message: 0x4095
          state_class: measurement

        - name: External Thermostat Application (WL2)  # FSV 2092
          message: 0x4096
          state_class: measurement

        - name: Defrost Mode
          message: 0x402e
          state_class: measurement

        - name: Thermo on
          message: 0x4028
          state_class: measurement

        - name: Pump PWM
          message: 0x40c4
          state_class: measurement
          unit_of_measurement: "%"

        - name: Water Law Offset
          id: water_law_offset_sensor
          message: 0x4248
          device_class: temperature
          state_class: measurement
          unit_of_measurement: "°C"
          accuracy_decimals: 1
          filters:
            - lambda: !lambda |
                return (int16_t) x;
            - multiply: 0.1

        - name: "Water Law Flow Temp"
          message: 0x427f
          device_class: temperature
          state_class: measurement
          unit_of_measurement: "°C"
          accuracy_decimals: 1
          filters:
            - multiply: 0.1

# Not supported
# FSV 2011 / 0x4254
# FSV 2012 / 0x4255
# FSV 2021 / 0x4256
# FSV 2022 / 0x4257
# Quiet Mode / 0x406e

sensor:
  - platform: template
    name: Total COP
    lambda: |-
      return id(heat_pump_heat_generated_total).state /
             id(heat_pump_energy_consumed_total).state;
    update_interval: 300s
    accuracy_decimals: 2

  - platform: template
    name: Instant COP
    state_class: measurement
    lambda: |-
      float x = (id(heat_pump_heat_generated_last_min).state /
           id(heat_pump_energy_consumed_last_min).state);
      if (x > 8) { x = 8; }
      if (x < 0) { x = 0; }
      return x;
    update_interval: 10s
    accuracy_decimals: 2

  - platform: template
    name: Daily COP
    state_class: measurement
    lambda: |-
      float x = (id(daily_heat_generated).state /
           id(daily_energy_consumed).state);
      if (x > 8) { x = 8; }
      if (x < 0) { x = 0; }
      return x;
    update_interval: 10s
    accuracy_decimals: 2

  - platform: template
    name: "Delta T"
    id: dT
    unit_of_measurement: °C
    update_interval: 10s
    lambda: |-
      return (id(flow_temp).state - (id(return_temp).state));

  - platform: total_daily_energy
    id: daily_energy_consumed
    name: 'Daily Energy Consumed'
    power_id: heat_pump_energy_consumed_last_min
    unit_of_measurement: 'kWh'
    state_class: total_increasing
    device_class: energy
    accuracy_decimals: 3
    filters:
      # Multiplication factor from W to kW is 0.001
      - multiply: 0.001

  - platform: total_daily_energy
    id: daily_heat_generated
    name: 'Daily Heat Generated'
    power_id: heat_pump_heat_generated_last_min
    unit_of_measurement: 'kWh'
    state_class: total_increasing
    device_class: energy
    accuracy_decimals: 3
    filters:
      # Multiplication factor from W to kW is 0.001
      - multiply: 0.001

# Enable time component to reset energy at midnight
time:
  - platform: homeassistant
    id: homeassistant_time
    timezone: "Europe/London"

# number:
#   - platform: template
#     name: "Water Law Offset Number"
#     id: water_law_offset_number
#     device_class: temperature
#     unit_of_measurement: °C
#     min_value: -5
#     max_value: 5
#     step: 0.5
#     # on_value:
#     lambda: |-
#       float current = (float) id(water_law_offset_sensor).state;
#       return current;
#     set_action:
#       - lambda: |-
#           id(water_law_offset_sensor).publish_state(x * 10);

climate:
  - platform: thermostat
    name: "Hot Water"
    id: climate_hot_water
    sensor: hot_water_current_temp
    min_heating_off_time: 300s
    min_heating_run_time: 300s
    min_idle_time: 30s
    target_temperature_change_action:
      then:
        - number.set:
            id: hot_water_target_temp
            value: !lambda "return id(climate_hot_water).target_temperature;"
    heat_action: {}
    idle_action: {}
    off_mode:
      then:
        - if:
            condition:
              switch.is_on: dhw_power
            then:
              switch.turn_off: dhw_power
    heat_mode:
      then:
        - if:
            condition:
              switch.is_off: dhw_power
            then:
              switch.turn_on: dhw_power
    visual:
      min_temperature: 30
      max_temperature: 60
      temperature_step:
        target_temperature: 0.5
        current_temperature: 0.1
